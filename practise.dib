#!csharp

int varb = 5 / 9;
Console.WriteLine(varb);

#!csharp

float f = 5 / 9F;
Console.WriteLine(f);

#!csharp

double f = 5 / 9;
Console.WriteLine(f);

#!csharp

decimal m1 = 100;
decimal m2 = 100M;

Console.WriteLine(m1);
Console.WriteLine(m2);

#!csharp

bool thisIsABool = true;
Console.WriteLine(thisIsABool);

#!csharp

char c = 'a';
Console.WriteLine(c);

#!csharp

string someString2 = "this is a string";
Console.WriteLine(someString2);
// In C# a string is a set of characters or character that's surrounded
// with double quotation marks.

#!csharp

string a = "c";
Console.WriteLine(a);

#!csharp

// The following is not legal.
// string someString = "This is a line 
// and so is this";

// However, the following is legal
string someString = "This is a line\nand so is this";
Console.WriteLine(someString);

#!csharp

string s = "this is a phrase" + " and so is this";
Console.WriteLine(s);

#!csharp

string mySecretName = String.Empty; // Why is this best practise?

#!csharp

// Verbatim string Literal
string someString = @"This is a line
and so is this";
// Ohhhh so the verbatim string operator is like raw string operator in python
Console.WriteLine(someString);

#!csharp

DateTime thisYear = new DateTime(2020, 1, 1);
bool isLeapYear = DateTime.IsLeapYear(thisYear.Year);
Console.WriteLine(isLeapYear);

#!csharp

DateTime thisMoment = DateTime.Now;
DateTime anHourFromNow = thisMoment.AddHours(1);
Console.WriteLine(anHourFromNow);

#!csharp

int year = DateTime.Now.Year;
DayOfWeek dayOfWeek = DateTime.Now.DayOfWeek;
Console.WriteLine(year);
Console.WriteLine(dayOfWeek);

#!csharp

DateTime date = DateTime.Today;  
TimeSpan time = thisMoment.TimeOfDay;
TimeSpan duration = new TimeSpan (3, 0, 0, 0);
DateTime threeDaysFromNow = thisMoment.Add(duration);

Console.WriteLine(date);
Console.WriteLine(time);
Console.WriteLine(duration);
Console.WriteLine(threeDaysFromNow);

#!csharp

// Interpolated Constants in C# are Formatted strings in Python
const string Name = "George";
const int Age = 44;
string GeorgeStat = $"{Name} is {Age} years old.";
Console.WriteLine(GeorgeStat);

#!csharp

// TypeCasting
long longValue = 10;
int intValue;
intValue = (int)longValue; 

#!csharp

// Letting the C# Compiler infer Data Types
var i = 5;
var s = "Hello C# 4.0";
var d = 1.0;

#!csharp

var aString = "Hello C# 3.0";
Console.WriteLine(aString.GetType().ToString());

#!csharp

string s = "abc"; //Declare and initialize a string

string s1 = new String("abcd"); // Instantiate a string

#!csharp

class Student {
    public String Name;
}

#!csharp

    // Create a student object.
    Student s1 = new Student();
    s1.Name = "Jenny";

    // Now make a new object with the same name.
    Student s2 = new Student();
    s2.Name = s1.Name;

    // "Changing" the name in the s1 object does not
    // change the object itself because ToUpper() returns
    // a new string withoug modifying the original.
    s2.Name = s1.Name.ToUpper();

    Console.WriteLine("s1 - " + s1.Name + ", s2 - " + s2.Name);
    Console.Read();

#!csharp

Console.WriteLine("Each Line you enter will be"
                 + " added to a sentence until you"
                + " enter EXIT or QUIT");

// Ask the user for input; continue concatenating
// the phrases input until the user enters exit or
// quit (start with an empty sentence).

string sentence = "";

for (int i = 0;i < 5;i++) // what a cool way to make an infinite loop
{
    // Get the next line.
    Console.WriteLine("Enter a string ");
    string line = Console.ReadLine();

    // Exit the loop if line is a terminator.
    string[] terms = {"EXIT", "exit", "QUIT", "quit"};

    // Compare the string entered to each of the 
    // legal exit command
    bool quitting = false;

    foreach (string term in terms)
    {
        // Break out of the for loop if you have a match.
        if (String.Compare(line, term) == 0)
        {
            quitting = true;
        }
    }
    if (quitting == true)
    {
        break;
    }
    // Otherwise, add it to the sentence.
    sentence = String.Concat(sentence, line);

    // Let the user know how she's doing.
    Console.WriteLine("\nyou've entered: " + sentence);
}

Console.WriteLine("\ntotal sentence:\n" + sentence);
Console.Read();

#!csharp

string lowcase = "armadillo";
string upcase = lowcase.ToUpper();

Console.WriteLine(lowcase);
Console.WriteLine(upcase);

#!csharp

string favoriteFood = "cheeseburgers";
foreach (char c in favoriteFood) 
{
    Console.Write(c);
}
Console.WriteLine();

#!csharp

char thirdChar = favoriteFood[2]; // First 'e' in "cheeseburgers"

#!csharp

int indexOfLetterS = favoriteFood.IndexOf('s');
Console.WriteLine(indexOfLetterS);

#!csharp

static string Quantity(int burgers) => burgers switch 
{
    <= 2 => "too few",
    > 10 => "too many",
    _ => "an acceptable number of",
};

#!csharp

Console.WriteLine("Buying " + Quantity(1) + " burgers.");
Console.WriteLine("Buying " + Quantity(13) + " burgers.");
Console.WriteLine("Buying " + Quantity(3) + " burgers.");

Console.ReadLine();
